type Member {
  _id: ID!
  firebaseId: String
  name: String!
  status: String
  roleId: ID
  role: Role
  imageLink: String
  responsibleId: ID
  responsible: Member
  message: String
  mandatories: [Mandatory]!
}

type Mandatory {
  """
  Hora de inicio em milisegundos do horário obrigatório
  """
  startAt: Int!
  """
  Hora de fim em milisegundos do horário obrigatório
  """
  endAt: Int!
  weekDay: Int!
}

type Query {
  members: [Member]!
  membersByResponsible(responsibleId: ID!): [Member]!
  member(_id: ID!): Member
}

input MandatoryInput {
  """
  Hora de inicio em milisegundos do horário obrigatório
  """
  startAt: Int!
  """
  Hora de fim em milisegundos do horário obrigatório
  """
  endAt: Int!
  weekDay: Int!
}

input MemberInput {
  firebaseId: String
  name: String!
  status: String
  roleId: ID
  imgLink: ID
  responsibleId: ID
  message: String
}

input MemberUpdate {
  name: String
  status: String
  roleId: ID
  imgLink: ID
  responsibleId: ID
  message: String
}

type LoginData {
  accessToken: ID!
  member: Member!
}

type Mutation {
  login(tokenId: ID!): LoginData!
  getSessionData: Member!
  createMember(data: MemberInput): Member!
  """
  Atualiza campos de um usuário, caso não passe o memberId, as alterações serão feitas no usuário logado.
  Caso seja enviado o ID do usuário será necessário ter a permissão para realiazar essa ação.
  """
  updateMember(memberId: ID, data: MemberUpdate!): Member!
  deleteMember(memberId: ID!): Boolean
  addMandatory(memberId: ID!, data: MandatoryInput): Member!
  removeMandatory(memberId: ID!, mandatoryId: ID!): Boolean!
}
